{"ast":null,"code":"import { decorate, observable } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\nimport { instance } from \"./instance\";\nimport axios from \"axios\";\n\nclass AuthStore {\n  constructor() {\n    this.user = null;\n\n    this.setUser = token => {\n      if (token) {\n        localStorage.setItem(\"myToken\", token);\n        axios.defaults.headers.common.Authorization = \"jwt \".concat(token);\n        const decodedUser = jwt_decode(token);\n        this.user = decodedUser;\n      } else {\n        delete axios.defaults.headers.common.Authorization;\n        localStorage.removeItem(\"myToken\");\n        this.user = null;\n      }\n    };\n\n    this.getProfile = async profile => {};\n\n    this.login = async (userData, history) => {\n      try {\n        const res = axios.post({\n          instance\n        }, userData);\n        const user = res.data;\n        this.setUser(user.token);\n        history.replace(\"/\");\n      } catch (err) {\n        console.error(err.response.data);\n      }\n    };\n\n    this.signup = async (userData, history) => {\n      try {\n        const res = await axios.post({\n          instance\n        }, userData);\n        const user = res.data; //this.user = jwt_decode(user.token);\n\n        this.setUser(user.token);\n        this.props.history.replace(\"/\");\n        console.log(\"[sign up from appstore] done\");\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.checkForToken = () => {\n      const token = localStorage.getItem(\"myToken\");\n\n      if (token) {\n        const currentTime = Date.now() / 1000;\n        const user = jwt_decode(token);\n\n        if (user.exp >= currentTime) {\n          this.setUser(token);\n        } else {\n          this.logout();\n        }\n      }\n    };\n  }\n\n}\n\ndecorate(AuthStore, {\n  user: observable\n});\nconst authStore = new AuthStore();\nauthStore.checkForToken();\nexport default authStore;","map":{"version":3,"sources":["/Users/fay/Documents/Coded/Development/capstone/frontend/app/src/components/store/authStore.js"],"names":["decorate","observable","jwt_decode","instance","axios","AuthStore","user","setUser","token","localStorage","setItem","defaults","headers","common","Authorization","decodedUser","removeItem","getProfile","profile","login","userData","history","res","post","data","replace","err","console","error","response","signup","props","log","checkForToken","getItem","currentTime","Date","now","exp","logout","authStore"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,MAArC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,CAAgB;AAAA;AAAA,SACdC,IADc,GACP,IADO;;AAAA,SAGdC,OAHc,GAGJC,KAAK,IAAI;AACjB,UAAIA,KAAJ,EAAW;AACTC,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCF,KAAhC;AACAJ,QAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,iBAAqDN,KAArD;AACA,cAAMO,WAAW,GAAGb,UAAU,CAACM,KAAD,CAA9B;AACA,aAAKF,IAAL,GAAYS,WAAZ;AACD,OALD,MAKO;AACL,eAAOX,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAArC;AACAL,QAAAA,YAAY,CAACO,UAAb,CAAwB,SAAxB;AACA,aAAKV,IAAL,GAAY,IAAZ;AACD;AACF,KAda;;AAAA,SAgBdW,UAhBc,GAgBD,MAAMC,OAAN,IAAiB,CAAE,CAhBlB;;AAAA,SAkBdC,KAlBc,GAkBN,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AACnC,UAAI;AACF,cAAMC,GAAG,GAAGlB,KAAK,CAACmB,IAAN,CAAW;AAAEpB,UAAAA;AAAF,SAAX,EAAyBiB,QAAzB,CAAZ;AACA,cAAMd,IAAI,GAAGgB,GAAG,CAACE,IAAjB;AACA,aAAKjB,OAAL,CAAaD,IAAI,CAACE,KAAlB;AACAa,QAAAA,OAAO,CAACI,OAAR,CAAgB,GAAhB;AACD,OALD,CAKE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,QAAJ,CAAaL,IAA3B;AACD;AACF,KA3Ba;;AAAA,SA6BdM,MA7Bc,GA6BL,OAAOV,QAAP,EAAiBC,OAAjB,KAA6B;AACpC,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW;AAAEpB,UAAAA;AAAF,SAAX,EAAyBiB,QAAzB,CAAlB;AACA,cAAMd,IAAI,GAAGgB,GAAG,CAACE,IAAjB,CAFE,CAGF;;AACA,aAAKjB,OAAL,CAAaD,IAAI,CAACE,KAAlB;AACA,aAAKuB,KAAL,CAAWV,OAAX,CAAmBI,OAAnB,CAA2B,GAA3B;AACAE,QAAAA,OAAO,CAACK,GAAR,CAAY,8BAAZ;AACD,OAPD,CAOE,OAAON,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,KAxCa;;AAAA,SA0CdO,aA1Cc,GA0CE,MAAM;AACpB,YAAMzB,KAAK,GAAGC,YAAY,CAACyB,OAAb,CAAqB,SAArB,CAAd;;AACA,UAAI1B,KAAJ,EAAW;AACT,cAAM2B,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;AACA,cAAM/B,IAAI,GAAGJ,UAAU,CAACM,KAAD,CAAvB;;AACA,YAAIF,IAAI,CAACgC,GAAL,IAAYH,WAAhB,EAA6B;AAC3B,eAAK5B,OAAL,CAAaC,KAAb;AACD,SAFD,MAEO;AACL,eAAK+B,MAAL;AACD;AACF;AACF,KArDa;AAAA;;AAAA;;AAwDhBvC,QAAQ,CAACK,SAAD,EAAY;AAClBC,EAAAA,IAAI,EAAEL;AADY,CAAZ,CAAR;AAIA,MAAMuC,SAAS,GAAG,IAAInC,SAAJ,EAAlB;AACAmC,SAAS,CAACP,aAAV;AACA,eAAeO,SAAf","sourcesContent":["import { decorate, observable } from \"mobx\";\nimport jwt_decode from \"jwt-decode\";\nimport { instance } from \"./instance\";\nimport axios from \"axios\";\n\nclass AuthStore {\n  user = null;\n\n  setUser = token => {\n    if (token) {\n      localStorage.setItem(\"myToken\", token);\n      axios.defaults.headers.common.Authorization = `jwt ${token}`;\n      const decodedUser = jwt_decode(token);\n      this.user = decodedUser;\n    } else {\n      delete axios.defaults.headers.common.Authorization;\n      localStorage.removeItem(\"myToken\");\n      this.user = null;\n    }\n  };\n\n  getProfile = async profile => {};\n\n  login = async (userData, history) => {\n    try {\n      const res = axios.post({ instance }, userData);\n      const user = res.data;\n      this.setUser(user.token);\n      history.replace(\"/\");\n    } catch (err) {\n      console.error(err.response.data);\n    }\n  };\n\n  signup = async (userData, history) => {\n    try {\n      const res = await axios.post({ instance }, userData);\n      const user = res.data;\n      //this.user = jwt_decode(user.token);\n      this.setUser(user.token);\n      this.props.history.replace(\"/\");\n      console.log(\"[sign up from appstore] done\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  checkForToken = () => {\n    const token = localStorage.getItem(\"myToken\");\n    if (token) {\n      const currentTime = Date.now() / 1000;\n      const user = jwt_decode(token);\n      if (user.exp >= currentTime) {\n        this.setUser(token);\n      } else {\n        this.logout();\n      }\n    }\n  };\n}\n\ndecorate(AuthStore, {\n  user: observable\n});\n\nconst authStore = new AuthStore();\nauthStore.checkForToken();\nexport default authStore;\n"]},"metadata":{},"sourceType":"module"}